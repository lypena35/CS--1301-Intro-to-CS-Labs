/*1. powerN
Given base and n that are both 1 or more, compute recursively (no loops)
the value of base to the n power, so powerN(3, 2) is 9 (3 squared). Results:powerN(3, 1) → 3,
powerN(3, 2) → 9,powerN(3, 3) → 27*/

import java.util.Scanner;
public class powerNum {
 public static int powerN(int base, int n) {
  if (n < 0) {
   return base * powerN(base, n + 1);
  } else if (n > 0) {
   return base * powerN(base, n - 1);
  } else {
   return 1;
  }
 }
 public static void main(String[] args) {
  int base = 0;
  int n = 0;
  int result;
  Scanner input = new Scanner(System.in);
  System.out.print("Enter base number:");
  base = input.nextInt();
  System.out.print("Enter the power number:");
  n = input.nextInt();
  result = powerNum.powerN(base, n);
  System.out.println(result);
 }
}

/*2. bunnyEars
We have a number of bunnies and each bunny has two big floppy ears.
We want to compute the total number of ears across all the bunnies
recursively (without loops or multiplication).Results:bunnyEars(0) → 0,
bunnyEars(1) → 2,bunnyEars(2) → 4*/


public class bunny {
 public static int bunnyEars(int bunnies) {
  if (bunnies > 1) {
   return bunnies + bunnies;
  } else {
   return 0;
  }
 }
 public static void main(String[] args) {
  int numBun;
  int result;
  Scanner input = new Scanner(System.in);
  System.out.print("Enter the number of bunnies:");
  numBun = input.nextInt();
  result = bunny.bunnyEars(numBun);
  System.out.println(result);
 }
}

/*3. triangle
We have triangle made of blocks. The topmost row has 1 block, the next
row down has 2 blocks, the next row has 3 blocks, and so on. Compute
recursively (no loops or multiplication) the total number of blocks in
such a triangle with the given number of rows.
Results:triangle(0) → 0,triangle(1) → 1,triangle(2) → 3.*/


public class triBlocks {
 public static int triangle(int rows) {
  if (rows < 2) {
   return rows;
  } else {
   return rows + triangle(rows - 1);
  }
 }
 public static void main(String[] args) {
  int result;
  Scanner input = new Scanner(System.in);
  System.out.print("Enter the number of triangles: ");
  result = input.nextInt();
  result = triBlocks.triangle(result);
  System.out.println(result);
 }
}
// Fibonacci sequence recursively
public class fibonacci1 {

 public static int fibonacci(int n) {
  if (n == 0) {
   return 0;
  } else if (n == 1) {
   return 1;
  } else {
   return fibonacci(n - 1) + fibonacci(n - 2);
  }
 }
 public static void main(String[] args) {
  Scanner input = new Scanner(System.in);
  int count = 0;
  System.out.println("Enter number: ");
  count = input.nextInt();
  for (int i = 0; i < count; i++) {
   System.out.print(fibonacci(i) + " ");
  }
 }
}

//Find the maximum number in the array recursively
public class FindMax{
    
public static int findMax(int[] arr, int length){
    if(length==1){
        return arr[0];
    }
    else{
        return max(arr[length-1], findMax(arr,length-1));
    }
}    

public static int max(int a, int b){
    if(a>b)
        return a;
    else
        return b;
}    
public static void main(String[] args){
    int[] arr={10,5,7,9,15,6,11,8,12,2};
    int maximum = findMax(arr,arr.length);
    System.out.println("Maximum element: "+maximum);
}
}
//Calculating the factorial recursively
import java.util.*;
public class calculateFactorial {

 public static int factorial(int n) {
  if (n > 1) {
   return n * factorial(n - 1);
  } else {
   return 1;
  }

 }
 
 public static void main(String[] args) {
  Scanner input = new Scanner(System.in);
  int number;
  int factorialResult;
  System.out.println("Enter a number: ");
  number = input.nextInt();
  factorialResult = factorial(number);
  System.out.println("Factorial of " + number + " is " + factorialResult);
 }
}

